// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: person/person.proto

package person

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersonQueryClient is the client API for PersonQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonQueryClient interface {
	// GetPerson is a method performing a unary call
	GetPerson(ctx context.Context, in *PersonKey, opts ...grpc.CallOption) (*Person, error)
	// GetPersonBlockedInput is a method waiting for client inputs to conclude
	GetPersonBlockedInput(ctx context.Context, opts ...grpc.CallOption) (PersonQuery_GetPersonBlockedInputClient, error)
	// GetPersonBlockedOutput is a method waiting for server outputs to conclude
	GetPersonBlockedOutput(ctx context.Context, in *PersonKey, opts ...grpc.CallOption) (PersonQuery_GetPersonBlockedOutputClient, error)
	// GetPersonBlockedInputOutput is a method waiting for both sides to conclude
	GetPersonBlockedInputOutput(ctx context.Context, opts ...grpc.CallOption) (PersonQuery_GetPersonBlockedInputOutputClient, error)
	// SetPerson is another unary method
	SetPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type personQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonQueryClient(cc grpc.ClientConnInterface) PersonQueryClient {
	return &personQueryClient{cc}
}

func (c *personQueryClient) GetPerson(ctx context.Context, in *PersonKey, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := c.cc.Invoke(ctx, "/person.PersonQuery/GetPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personQueryClient) GetPersonBlockedInput(ctx context.Context, opts ...grpc.CallOption) (PersonQuery_GetPersonBlockedInputClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonQuery_ServiceDesc.Streams[0], "/person.PersonQuery/GetPersonBlockedInput", opts...)
	if err != nil {
		return nil, err
	}
	x := &personQueryGetPersonBlockedInputClient{stream}
	return x, nil
}

type PersonQuery_GetPersonBlockedInputClient interface {
	Send(*PersonKey) error
	CloseAndRecv() (*Person, error)
	grpc.ClientStream
}

type personQueryGetPersonBlockedInputClient struct {
	grpc.ClientStream
}

func (x *personQueryGetPersonBlockedInputClient) Send(m *PersonKey) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personQueryGetPersonBlockedInputClient) CloseAndRecv() (*Person, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Person)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personQueryClient) GetPersonBlockedOutput(ctx context.Context, in *PersonKey, opts ...grpc.CallOption) (PersonQuery_GetPersonBlockedOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonQuery_ServiceDesc.Streams[1], "/person.PersonQuery/GetPersonBlockedOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &personQueryGetPersonBlockedOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PersonQuery_GetPersonBlockedOutputClient interface {
	Recv() (*Person, error)
	grpc.ClientStream
}

type personQueryGetPersonBlockedOutputClient struct {
	grpc.ClientStream
}

func (x *personQueryGetPersonBlockedOutputClient) Recv() (*Person, error) {
	m := new(Person)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personQueryClient) GetPersonBlockedInputOutput(ctx context.Context, opts ...grpc.CallOption) (PersonQuery_GetPersonBlockedInputOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonQuery_ServiceDesc.Streams[2], "/person.PersonQuery/GetPersonBlockedInputOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &personQueryGetPersonBlockedInputOutputClient{stream}
	return x, nil
}

type PersonQuery_GetPersonBlockedInputOutputClient interface {
	Send(*PersonKey) error
	Recv() (*Person, error)
	grpc.ClientStream
}

type personQueryGetPersonBlockedInputOutputClient struct {
	grpc.ClientStream
}

func (x *personQueryGetPersonBlockedInputOutputClient) Send(m *PersonKey) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personQueryGetPersonBlockedInputOutputClient) Recv() (*Person, error) {
	m := new(Person)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personQueryClient) SetPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/person.PersonQuery/SetPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonQueryServer is the server API for PersonQuery service.
// All implementations must embed UnimplementedPersonQueryServer
// for forward compatibility
type PersonQueryServer interface {
	// GetPerson is a method performing a unary call
	GetPerson(context.Context, *PersonKey) (*Person, error)
	// GetPersonBlockedInput is a method waiting for client inputs to conclude
	GetPersonBlockedInput(PersonQuery_GetPersonBlockedInputServer) error
	// GetPersonBlockedOutput is a method waiting for server outputs to conclude
	GetPersonBlockedOutput(*PersonKey, PersonQuery_GetPersonBlockedOutputServer) error
	// GetPersonBlockedInputOutput is a method waiting for both sides to conclude
	GetPersonBlockedInputOutput(PersonQuery_GetPersonBlockedInputOutputServer) error
	// SetPerson is another unary method
	SetPerson(context.Context, *Person) (*emptypb.Empty, error)
	mustEmbedUnimplementedPersonQueryServer()
}

// UnimplementedPersonQueryServer must be embedded to have forward compatible implementations.
type UnimplementedPersonQueryServer struct {
}

func (UnimplementedPersonQueryServer) GetPerson(context.Context, *PersonKey) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerson not implemented")
}
func (UnimplementedPersonQueryServer) GetPersonBlockedInput(PersonQuery_GetPersonBlockedInputServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPersonBlockedInput not implemented")
}
func (UnimplementedPersonQueryServer) GetPersonBlockedOutput(*PersonKey, PersonQuery_GetPersonBlockedOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPersonBlockedOutput not implemented")
}
func (UnimplementedPersonQueryServer) GetPersonBlockedInputOutput(PersonQuery_GetPersonBlockedInputOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPersonBlockedInputOutput not implemented")
}
func (UnimplementedPersonQueryServer) SetPerson(context.Context, *Person) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPerson not implemented")
}
func (UnimplementedPersonQueryServer) mustEmbedUnimplementedPersonQueryServer() {}

// UnsafePersonQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonQueryServer will
// result in compilation errors.
type UnsafePersonQueryServer interface {
	mustEmbedUnimplementedPersonQueryServer()
}

func RegisterPersonQueryServer(s grpc.ServiceRegistrar, srv PersonQueryServer) {
	s.RegisterService(&PersonQuery_ServiceDesc, srv)
}

func _PersonQuery_GetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonQueryServer).GetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.PersonQuery/GetPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonQueryServer).GetPerson(ctx, req.(*PersonKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonQuery_GetPersonBlockedInput_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonQueryServer).GetPersonBlockedInput(&personQueryGetPersonBlockedInputServer{stream})
}

type PersonQuery_GetPersonBlockedInputServer interface {
	SendAndClose(*Person) error
	Recv() (*PersonKey, error)
	grpc.ServerStream
}

type personQueryGetPersonBlockedInputServer struct {
	grpc.ServerStream
}

func (x *personQueryGetPersonBlockedInputServer) SendAndClose(m *Person) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personQueryGetPersonBlockedInputServer) Recv() (*PersonKey, error) {
	m := new(PersonKey)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PersonQuery_GetPersonBlockedOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PersonKey)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersonQueryServer).GetPersonBlockedOutput(m, &personQueryGetPersonBlockedOutputServer{stream})
}

type PersonQuery_GetPersonBlockedOutputServer interface {
	Send(*Person) error
	grpc.ServerStream
}

type personQueryGetPersonBlockedOutputServer struct {
	grpc.ServerStream
}

func (x *personQueryGetPersonBlockedOutputServer) Send(m *Person) error {
	return x.ServerStream.SendMsg(m)
}

func _PersonQuery_GetPersonBlockedInputOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonQueryServer).GetPersonBlockedInputOutput(&personQueryGetPersonBlockedInputOutputServer{stream})
}

type PersonQuery_GetPersonBlockedInputOutputServer interface {
	Send(*Person) error
	Recv() (*PersonKey, error)
	grpc.ServerStream
}

type personQueryGetPersonBlockedInputOutputServer struct {
	grpc.ServerStream
}

func (x *personQueryGetPersonBlockedInputOutputServer) Send(m *Person) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personQueryGetPersonBlockedInputOutputServer) Recv() (*PersonKey, error) {
	m := new(PersonKey)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PersonQuery_SetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonQueryServer).SetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.PersonQuery/SetPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonQueryServer).SetPerson(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonQuery_ServiceDesc is the grpc.ServiceDesc for PersonQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "person.PersonQuery",
	HandlerType: (*PersonQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPerson",
			Handler:    _PersonQuery_GetPerson_Handler,
		},
		{
			MethodName: "SetPerson",
			Handler:    _PersonQuery_SetPerson_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPersonBlockedInput",
			Handler:       _PersonQuery_GetPersonBlockedInput_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetPersonBlockedOutput",
			Handler:       _PersonQuery_GetPersonBlockedOutput_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPersonBlockedInputOutput",
			Handler:       _PersonQuery_GetPersonBlockedInputOutput_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "person/person.proto",
}
